#version 450

// Dimensionality: uimageBuffer is 1D, while uimage2D is 2D.
// Use Cases: Choose based on whether your application requires handling data with a natural 2D layout (uimage2D) or a linear 1D layout (uimageBuffer).
#define OIT_LAYERS 5
layout(set = 0, binding = 0, rgba32ui) uniform readonly uimageBuffer sampleDataImage;
layout(set = 0, binding = 1, r32ui) uniform readonly uimage2D sampleCountImage;
layout(set = 0, binding = 3) uniform ViewportInformation
{
    ivec3 extent; // width, height, width * height
} viewportInfo;

layout(set = 1, binding = 0) uniform writeonly image2D imgOutput;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x; 
    if (index >= viewportInfo.extent.z) return;
    ivec2 coord = ivec2(index % viewportInfo.extent.x, index / viewportInfo.extent.x);
    uvec4 arrSamples[OIT_LAYERS];
    int abufferCoord = coord.y * viewportInfo.extent.x * OIT_LAYERS + coord.x * OIT_LAYERS;
    
    int sampleCount = int(imageLoad(sampleCountImage, coord).r);
    sampleCount = min(sampleCount, OIT_LAYERS);
    
    for (int i = 0; i < sampleCount; ++i)
    {
        arrSamples[i] = imageLoad(sampleDataImage, abufferCoord + i);
    }

    // bubble sort samples
    for (int i = 0; i < sampleCount - 1; ++i) 
    {
        // Track if any elements were swapped during this pass
        bool swapped = false;
        // Last i elements are already sorted
        for (int j = 0; j < sampleCount - i - 1; ++j) 
        {
            uint  frontDepth = arrSamples[j].g;
            uint  postDepth = arrSamples[j + 1].g;
            bool needSwap = frontDepth < postDepth;
            if (needSwap) 
            {
                // Swap if the element found is greater than the next element
                uvec4 tmp = arrSamples[j + 1];
                arrSamples[j + 1] = arrSamples[j];
                arrSamples[j]     = tmp;
                swapped = true;
            }
        }
        // If no elements were swapped, the array is already sorted
        if (!swapped) 
        {
            break;
        }
    }

    // accumulate color
    vec4 colorSum = vec4(0.f, 0.f, 0.f, 1.f);
    for (int i = 0; i < sampleCount; ++i)
    {
        vec4 currentColor = unpackUnorm4x8(arrSamples[i].r);
        colorSum.rgb = currentColor.rgb + currentColor.a * colorSum.rgb;
        colorSum.a = clamp(currentColor.a * colorSum.a, 0.0f, 1.0f);
    }

    imageStore(imgOutput, coord, colorSum);
}