#version 460 core
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "rt_common.glsl"

layout(set = 0, binding = 0) uniform CameraInformation
{
    mat4 viewInverse;
    mat4 projInverse;
    vec4 eye;
} cameraInfo;
layout(set = 0, binding = 1) uniform accelerationStructureEXT accelerationStructure;
layout(set = 0, binding = 2, rgba32f) uniform image2D imageOutput;
layout(location = 0) rayPayloadEXT HitPayload payload;

void GetRayOriginAndDirection(out vec3 rayOrigin, out vec3 rayDirection)
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    rayOrigin = cameraInfo.eye.xyz;
    vec4 clipSpacePos = vec4(inUV * 2.0 - 1.0, 0.0, 1.0);
    vec4 viewSpacePos = cameraInfo.projInverse * clipSpacePos;
    viewSpacePos /= viewSpacePos.w; // Perspective divide
    rayDirection = normalize(viewSpacePos.xyz - rayOrigin);
}

void EmitRay(in vec3 rayOrigin, in vec3 rayDirection)
{
    //uint rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;
    traceRayEXT(
        accelerationStructure,
        gl_RayFlagsOpaqueEXT,       // Ray flags
        0xFF,                       // object mask
        0,                          // sbtRecordOffset
        0,                          // sbtRecordStride
        0,                          // missIndex
        rayOrigin,                  // ray origin
        0.001f,                     // ray min range
        rayDirection,               // ray direction
        10000.0f,                   // ray max range
        0                           // payload (location = 0)
    );   
}

void main()
{
    vec3 rayOrigin, rayDirection;
    GetRayOriginAndDirection(rayOrigin, rayDirection);
    EmitRay(rayOrigin, rayDirection);
    imageStore(imageOutput, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue, 1.0));
}