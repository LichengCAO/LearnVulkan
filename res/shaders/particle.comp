struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout(binding = 0) uniform ParameterUBO{
    float deltaTime;
} ubo;

//specifies the how member elements of the shader storage buffer are aligned in memory
layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    Particle particleIn = particlesIn[index];
    vec2 newPos = particleIn.position + particleIn.velocity.xy * ubo.deltaTime;
    particlesOut[index].position = newPos;
    particlesOut[index].color = vec4(1,1,1,1);
    if (newPos.x < -1.0 || newPos.x > 1.0)
    {
        particleIn.velocity.x = -particleIn.velocity.x;
    }
    if (newPos.y < -1.0 || newPos.y > 1.0)
    {
        particleIn.velocity.y = -particleIn.velocity.y;
    }
    particlesOut[index].velocity = particleIn.velocity;
}