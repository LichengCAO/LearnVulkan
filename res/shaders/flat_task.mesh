#version 450

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

#define MESHLETS_PER_TASK_WORKGROUP 32
#define TASK_WORKGROUP_SIZE 32
#define MESH_WORKGROUP_SIZE 64
#define MESHLETS_PER_MESH_WORKGROUP 1

const uint MESHLETS_PER_TASK_INVOCATION = (MESHLETS_PER_TASK_WORKGROUP + TASK_WORKGROUP_SIZE - 1) / TASK_WORKGROUP_SIZE;

struct Meshlet
{
	uint vertexOffset;
	uint vertexCount;
	uint triangleOffset;
	uint triangleCount;
};
struct VBO
{
	vec3 position;
	vec3 normal;
};
struct Task
{
	uint baseMeshletId;
	uint8_t meshletIdOffset[MESHLETS_PER_TASK_WORKGROUP];
};

taskPayloadSharedEXT Task IN;
layout(local_size_x = MESH_WORKGROUP_SIZE) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;
layout(location = 0) out PerVertexData
{
	vec3 colorRGB;
} v_out[];

layout(set = 0, binding = 0) uniform CameraUBO {
	mat4 view;
	mat4 proj;
	vec4 eye;
}ubo;
layout(set = 1, binding = 0) readonly buffer Meshlets {Meshlet meshlets[];};
layout(set = 1, binding = 1) readonly buffer MeshletVertices {uint meshletVertices[];};
layout(set = 1, binding = 2) readonly buffer MeshletTriangles {uint8_t meshletTriangles[];};
layout(set = 1, binding = 3) readonly buffer VertexBuffer {VBO vertices[];};
layout(set = 1, binding = 4) uniform ModelUBO{
	mat4 model;
	mat4 inverseTransposeModel;
	uint meshletCount;
}modelUBO;

// Returns the meshlet ID for the current mesh shader workgroup of the current invocation
uint getMeshletID(uint iteration)
{
	uint workGroupID = gl_WorkGroupID.x;
	return IN.baseMeshletId + IN.meshletIdOffset[workGroupID * MESHLETS_PER_MESH_WORKGROUP + iteration];
}

// Returns the local invocation ID within the workgroup
uint getLocalInvocationID()
{
	return gl_LocalInvocationID.x;
}

VBO getVertex(uint index)
{
	return vertices[index];
}

vec3 randomColor(uint seed) {
    // Normalize the seed (uint8_t is between 0-255)
    float base = float(seed & 0xFFu) / 255.0;

    // Generate pseudo-random RGB values based on the seed
    float r = fract(sin(base * 12.9898) * 43758.5453) + 0.02;
    float g = fract(sin(base * 78.233) * 43758.5453) + 0.02;
    float b = fract(sin(base * 45.164) * 43758.5453) + 0.02;

    return vec3(r, g, b); // Return the generated color
}

// each mesh shader invocation doesn't process a complete meshlet, but processes part of the meshlet of the same mesh workgroup
// it's the mesh workgroup that processes complete meshlets uint
void main()
{
	uint uMeshOutputVertexCount = 0u;
	uint uMeshOutputPrimitiveCount = 0u;
	uint uValidIndexCount = 0u;
	Meshlet vecMeshlets[MESHLETS_PER_MESH_WORKGROUP];
	for (uint i = 0u; i < MESHLETS_PER_MESH_WORKGROUP; ++i)
	{
		uint uMeshletID = getMeshletID(i);
		if (uMeshletID >= modelUBO.meshletCount)
		{
			break;
		}
		vecMeshlets[i] = meshlets[uMeshletID];
		uMeshOutputVertexCount    += vecMeshlets[i].vertexCount;
		uMeshOutputPrimitiveCount += vecMeshlets[i].triangleCount;
		++uValidIndexCount;
	}
	SetMeshOutputsEXT(uMeshOutputVertexCount, uMeshOutputPrimitiveCount);
	
	// Emit meshlet vertices and triangles
	uint uMeshVerticesOffset = 0u;
	uint uPrimitiveTriangleOffset = 0u;
	for (uint i = 0u; i < uValidIndexCount; ++i)
	{
		const vec3 color = randomColor(getMeshletID(i));
		const uint uVertexCount = vecMeshlets[i].vertexCount;
		const uint uPrimitiveCount = vecMeshlets[i].triangleCount;
		const uint uVertexOffset = vecMeshlets[i].vertexOffset;
		const uint uTriangleOffset = vecMeshlets[i].triangleOffset;

		// we add MESH_WORKGROUP_SIZE to make each invocation process vertices and triangles of the same meshlet evenly
		for (uint j = getLocalInvocationID(); j < uVertexCount; j += MESH_WORKGROUP_SIZE)
		{
			uint index = meshletVertices[uVertexOffset + j];
			VBO vertex = getVertex(index);
			gl_MeshVerticesEXT[j + uMeshVerticesOffset].gl_Position = ubo.proj * ubo.view * modelUBO.model * vec4(vertex.position, 1.0);
			v_out[j + uMeshVerticesOffset].colorRGB = color;
		}

		for (uint j = getLocalInvocationID(); j < uPrimitiveCount; j += MESH_WORKGROUP_SIZE)
		{
			uint offset = uTriangleOffset + j * 3;
			gl_PrimitiveTriangleIndicesEXT[j + uPrimitiveTriangleOffset] = uvec3(
				meshletTriangles[offset + 2],
				meshletTriangles[offset + 1],
				meshletTriangles[offset + 0]
			);
		}
		uMeshVerticesOffset += uVertexCount;
		uPrimitiveTriangleOffset += uPrimitiveCount;
	}
}